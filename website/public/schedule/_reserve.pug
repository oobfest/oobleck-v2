script(src="https://checkout.stripe.com/checkout.js")
#reserve
  section(v-if="show.price == 0")
    p This show is free! Just show up!
  section(v-else-if="show.remaining == 0")
    .text-center
      h3 This show is sold out!
  section(v-else-if="boxOfficeClosed")
    .text-center
      p Online sales for this show have ended.
      p Tickets are still available at the door!

  section.text-center(v-else-if="state==0 && show.remaining > 0")
      p
        button.btn.btn-primary.btn-lg(type="button" @click="refreshTickets") Buy Tickets â€“ ${{show.price}}
      p
        button.btn.btn-primary.btn-lg(type="button" @click="state=1") Reserve with Badge
  section(v-show="state==1")
    .form-group
      label Badge Email
      input.form-control(type="email" v-model="email")
    .form-group
      label Quantity
      select.custom-select(v-model="quantity")
        option 1
        option 2
        option 3
    .text-right
      button.btn.btn-lg.btn-primary(type="button" @click="state--") Back
      | &nbsp;
      button.btn.btn-lg.btn-primary(type="button" @click="reserveWithBadge(show._id)") Make Reservation
  section(v-show="state==2")
    .text-center
      h2 Success!
      p A confirmation email has been sent to &nbsp;
        span.code {{email}}
  section(v-show="state==3")
    .form-group
      label(for="name") Name
      input#paypal-name.form-control(type="text" v-model="ticket.name")
    .form-group
      label(for="phone") Phone Number
      input#paypal-phone.form-control(type="tel" v-model="ticket.phone")
    .form-group
      label(for="quantity") Quantity
      select#paypal-quantity.custom-select(name="quantity" v-model="ticket.quantity")
        option(v-for="n in quantityToSell") {{n}}
    .form-group.text-center
      button.btn.btn-lg.btn-primary(type="button" @click="state=0") Back
      | &nbsp;
      button#stripe-button.btn.btn-lg.btn-primary(@click.prevent="stripeHandler") Pay with Stripe
    .row
      .col.text-center
        img(src="/img/powered-by-stripe.svg" height="55px")
    .text-right

script.
  let handler = StripeCheckout.configure({
    //key: 'pk_test_vSOv2tJVVsBEI6PZJLJBNiOW',
    key: 'pk_live_iR3EiMyek6fnYWIoFptERALW',
    image: '/img/oob-logo-fire.jpg',
    locale: 'auto',
    zipCode: true,
    currency: 'usd',
    allowRememberMe: true,
    token: function(token) {
      reserve.ticket.email = token.email
      reserve.email = token.email
      let data = { token, ticket: reserve.ticket }
      axios
        .post('/api/stripe/show/' + showModal.show._id, data)
        .then(response=>{
          if(response.data.paid) {
            showModal.state = 2
          }
          else {
            alert("The payment was cancelled: " + response.data.message)
            showModal.state = 0
          }
        })
        .catch(error=> {
          console.log("ERROR :(")
          console.log(error)
        })
    }
  })


  let reserve = new Vue({
    el: "#reserve",
    data() {
      return {
        show: {},
        state: 0,
        email: "",
        quantity: 1,
        clickCounter: 0,
        showUrl: false,
        ticket: {
          name: '',
          phone: '',
          quantity: 1
        }
      }
    },
    filters: {
      time(time) {
        time = String(time)
        return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
      },
      venue(venue) {
        switch(venue) {
          case 'Hideout Up':        return 'Hideout Upstairs'
          case 'Hideout Down':      return 'Hideout Downstairs'
          case 'ColdTowne':         return 'ColdTowne'
          case 'Fallout':           return 'Fallout'
          case 'Velveeta':          return 'Velveeta'
          case 'Spider House':      return 'Spider House'
          case 'Institution':       return 'Institution'
        }
      },
    },
    computed: {
      boxOfficeClosed() {
        // When it is the week of the festival:
        let now = new Date()
        let nowDay = now.getDay() <= 1 ? now.getDay() + 5 : now.getDay() - 2
        let nowTime = ( (now.getHours() - 11) * 100) + now.getMinutes()
        let showDay = ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'].indexOf(this.show.day)
        let showTime = this.show.startTime
        return (nowDay > showDay) || ((nowDay == showDay) && (nowTime >= showTime))
      },
      quantityToSell() {
        if(this.show.remaining) return Math.min(this.show.remaining, 15)
        else return 0
      },
    },
    methods: {
      refreshTickets() {
        axios
          .get('/api/shows/refresh-tickets/' + this.show._id)
            .then(response=> {
              this.show.remaining = response.data.remaining
              if(this.show.remaining<=0) this.state = 0
              else this.state = 3
            })
            .catch(error=> {
              alert("Error getting ticket data, please try again later")
            })
      },
      isValid() {
        return this.ticket.name != '' && this.ticket.phone != ''
      },
      stripeHandler() {
        if (this.isValid()) {
          handler.open({
            name: 'Out Of Bounds Comedy',
            description: this.show.day + " Show Ticket",
            amount: (this.show.price * this.ticket.quantity) * 100
          })
        }
        else alert("All fields are required!")
      },
      paid(email) {
        this.email = email
        this.state = 2
      },
      reserveWithBadge(showId) {
        if (this.email == '') return alert("Please enter an email address")
        let self = this
        axios
          .post('/api/shows/add-badge-reservation/' + showId, {email: self.email, quantity: self.quantity})
          .then(function(response) {
            if(response.data.reservationSuccessful) {
              self.state++
            }
            else {
              alert(response.data.message)
            }
          })
          .catch(function(error) {
            alert("Error reserving for show with badge :(")
            console.log(error)
            this.reset()
          })
      },
      reset() {
        this.state = 0
        this.showUrl = false
        // Keep the same email address for convenience!
        this.quantity = 1
      },
    },
    created() {
      let showId = '#{show._id}'
      let self = this
      axios
        .get('/api/shows/' + showId)
        .then(response=> {
          self.show = response.data
        })
        .catch(error=> {
          console.log(error)
        })
    }
  })