
#reserve
  section(v-if="show.remaining == 0")
    .text-center
      h3 This show is sold out!
  section(v-else-if="boxOfficeClosed")
    .text-center
      p Online sales for this show have ended.
      p Tickets are still available at the door!

  section(v-else-if="state==0 && show.remaining > 0")
    .text-center
      //- button.btn.btn-primary(type="button" @click="state=3") Buy Tickets â€“ ${{show.price}}
      | &nbsp;
      button.btn.btn-primary.btn-lg(type="button" @click="state=1") Reserve with Badge
  section(v-show="state==1")
    h5 Reserve with Badge
    .form-group
      label Badge Email
      input.form-control(type="email" v-model="email")
    .form-group
      label Quantity
      select.custom-select(v-model="quantity")
        option 1
        option 2
        option 3
    .text-right
      button.btn.btn-primary(type="button" @click="state--") Back
      | &nbsp;
      button.btn.btn-primary(type="button" @click="reserveWithBadge(show._id)") Make Reservation
  section(v-show="state==2")
    .text-center
      h2 Success!
      p A confirmation email has been sent to &nbsp;
        span.code {{email}}
  section(v-show="state==3")
    p Stripe Goes Here
    //paypal(:show-id="show._id", :remaining="remaining" @paid="paid")
    .text-right
      button.btn.btn-primary(type="button" @click="state=0") Back


script.
  let reserve = new Vue({
    el: "#reserve",
    data() {
      return {
        show: {},
        state: 0,
        email: "",
        quantity: 1,
        remaining: null,
        clickCounter: 0,
        showUrl: false
      }
    },
    filters: {
      time(time) {
        time = String(time)
        return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
      },
      venue(venue) {
        switch(venue) {
          case 'Hideout Up':        return 'Hideout Upstairs'
          case 'Hideout Down':      return 'Hideout Downstairs'
          case 'ColdTowne':         return 'ColdTowne'
          case 'Fallout':           return 'Fallout'
          case 'Velveeta':          return 'Velveeta'
          case 'Spider House':      return 'Spider House'
          case 'Institution':       return 'Institution'
        }
      },
    },
    computed: {
      boxOfficeClosed() {
        // Todo: Update!
        return false

        // When it is the week of the festival:
        let now = new Date()
        let nowDay = now.getDay() <= 1 ? now.getDay() + 5 : now.getDay() - 2
        let nowTime = ( (now.getHours() - 11) * 100) + now.getMinutes()
        let showDay = ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'].indexOf(this.show.day)
        let showTime = this.show.time
        return (nowDay > showDay) || ((nowDay == showDay) && (nowTime >= showTime))
      },
    },
    methods: {
      paid(email) {
        this.email = email
        this.state = 2
      },
      reserveWithBadge(showId) {
        if (this.email == '') return alert("Please enter an email address")
        let self = this
        axios
          .post('/api/shows/add-badge-reservation/' + showId, {email: self.email, quantity: self.quantity})
          .then(function(response) {
            if(response.data.reservationSuccessful) {
              self.state++
            }
            else {
              alert(response.data.message)
            }
          })
          .catch(function(error) {
            alert("Error reserving for show with badge :(")
            console.log(error)
            this.reset()
          })
      },
      reset() {
        this.state = 0
        this.showUrl = false
        // Keep the same email address for convenience!
        this.quantity = 1
      },
    },
    created() {
      let showId = '#{show._id}'
      let self = this
      axios
        .get('/api/shows/' + showId)
        .then(response=> {
          self.show = response.data
        })
        .catch(error=> {
          console.log(error)
        })
    }
  })