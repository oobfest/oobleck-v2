script#modal-template(type="text/template")
  .modal#show-modal
    .modal-dialog(:class="modalSize")
      .modal-content
        .modal-header
          span.modal-title {{show.day}}, {{show.venue | venue}} at {{show.startTime | time}}
          button.close(type="button" @click="hide") &times;
        .modal-body
          section(v-show="state==0")
            ul.list-unstyled.mb-2
              li.media(v-for="act in show.acts")
                img.mr-3.align-self-center(:src="'https://i.imgur.com/' + act.image.id + 'b.jpg'")
                .media-body.align-self-center
                  h2.modal-act-name {{act.name}}
                    small &mdash; {{act.showType.join(', ')}}
                  h5(v-if="act.city") {{act.city}}, {{act.state}}
                  p.modal-act-description {{act.publicDescription}}
            .media(v-if="show.host")
              img.mr-3.mb-3.align-self-center(:src="show.host.imageUrl + 'b.jpg'" v-if="show.host.image")
              .media-body.align-self-center
                h2.modal-act-name Hosted by {{show.host.name}}
                p.modal-act-description {{show.host.bio}}

            .mb-3.text-right
              p
                i.far.fa-share-square
                | &nbsp;
                a(:href="'https://oobfest.com/schedule/' + show.url" target="_blank") {{'https://oobfest.com/schedule/' + show.url}}

            .text-right
              button.btn.btn-primary(type="button" @click="state=1") Reserve with Badge
              | &nbsp;
              button.btn.btn-primary(type="button" @click="state=3") Buy Tickets â€“ ${{show.price}}
          section(v-show="state==1")
            .form-group
              label Badge Email
              input.form-control(type="email" v-model="email")
            .form-group
              label Quantity
              select.custom-select(v-model="quantity")
                option 1
                option 2
                option 3
            .text-right
              button.btn.btn-primary(type="button" @click="state--") Back
              | &nbsp;
              button.btn.btn-primary(type="button" @click="reserveWithBadge(show._id)") Make Reservation
          section(v-show="state==2")
            .text-center
              h2 Success!
              p A confirmation email has been sent to &nbsp;
                span.code {{email}}
          section(v-show="state==3")
            .form-group
              label(for="name") Name
              input#paypal-name.form-control(type="text" v-model="ticket.name")
            .form-group
              label(for="phone") Phone Number
              input#paypal-phone.form-control(type="tel" v-model="ticket.phone")
            .form-group
              label(for="quantity") Quantity
              select#paypal-quantity.custom-select(name="quantity" v-model="ticket.quantity")
                option(v-for="n in quantityToSell") {{n}}
            .form-group.text-center
              button.btn.btn-primary(type="button" @click="state=0") Back
              | &nbsp;
              button#stripe-button.btn.btn-primary(@click.prevent="stripeHandler") Pay with Stripe
            .row
              .col.text-center
                img(src="/img/powered-by-stripe.svg" height="55px")
            .text-right

script(src="https://checkout.stripe.com/checkout.js")
script.
  let handler = StripeCheckout.configure({
    //key: 'pk_test_vSOv2tJVVsBEI6PZJLJBNiOW',
    key: 'pk_live_iR3EiMyek6fnYWIoFptERALW',
    image: '/img/oob-logo-fire.jpg',
    locale: 'auto',
    zipCode: true,
    currency: 'usd',
    allowRememberMe: true,
    token: function(token) {
      let showModal = schedule.$children[0]
      showModal.ticket.email = token.email
      showModal.email = token.email
      let data = { token, ticket: showModal.ticket }
      axios
        .post('/api/stripe/show/' + showModal.show._id, data)
        .then(response=>{
          if(response.data.paid) {
            showModal.state = 2
          }
          else alert("Payment failed ðŸ˜Ÿ")
        })
        .catch(error=> {
          console.log("ERROR :(")
          console.log(error)
        })
    }
  })

  Vue.component('modal', {
    template: "#modal-template",
    props: ['show', 'acts'],
    data() {
      return {
        state: 0,
        email: "",
        quantity: 1,
        remaining: null,
        clickCounter: 0,
        showUrl: false,
        ticket: {
          name: '',
          phone: '',
          quantity: 1
        }
      }
    },
    computed: {
      modalSize() {
        return this.state == 0 || this.state == 2
          ? 'modal-lg'
          : 'modal-md'
      },
      quantityToSell() {
        if(this.show.remaining) return Math.min(this.show.remaining, 15)
        else return 0
      },
    },
    filters: {
      time(time) {
        time = String(time)
        return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
      },
      venue(venue) {
        switch(venue) {
          case 'Hideout Up':        return 'Hideout Upstairs'
          case 'Hideout Down':      return 'Hideout Downstairs'
          case 'ColdTowne':         return 'ColdTowne'
          case 'Fallout':           return 'Fallout'
          case 'Velveeta':          return 'Velveeta'
          case 'Spider House':      return 'Spider House'
          case 'Institution':       return 'Institution'
        }
      },
    },
    methods: {
      isValid() {
        return this.ticket.name != '' && this.ticket.phone != ''
      },
      stripeHandler() {
        if (this.isValid()) {
          let time = String(this.show.startTime)
          time = time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
          handler.open({
            name: 'Out Of Bounds Comedy',
            description: this.show.day + ", " + this.show.venue + " at " + time,
            amount: (this.show.price * this.ticket.quantity) * 100
          })
        }
        else alert("All fields are required!")
      },
      hide(){
        let backdrop = document.getElementById('modal-backdrop')
        backdrop.remove()
        document.getElementById('show-modal').style.display = "none"
        document.body.classList.remove('modal-open')
        this.reset()
      },
      boxOfficeClosed() {
        // Todo: Update!
        let weekOfFestival = false
        if(weekOfFestival) {
          let now = new Date()
          let nowDay = now.getDay() <= 1 ? now.getDay() + 5 : now.getDay() - 2
          let nowTime = ( (now.getHours() - 11) * 100) + now.getMinutes()
          let showDay = ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'].indexOf(this.show.day)
          let showTime = this.show.time
          return (nowDay > showDay) || ((nowDay == showDay) && (nowTime >= showTime))
        }
        else return false
      },
      getUrlForShow(show) {
        if (show.day && show.venue && show.startTime)
          return 'https://oobfest.com/schedule/' + show.day + '/' + show.venue + '/' + show.startTime
        else return ''
      },
      paid(email) {
        this.email = email
        this.state = 2
      },
      reserveWithBadge(showId) {
        if (this.email == '') return alert("Please enter email")

        let self = this
        axios
          .post('/api/shows/add-badge-reservation/' + showId, {email: self.email, quantity: self.quantity})
          .then(function(response) {
            if(response.data.reservationSuccessful) {
              self.state++
            }
            else {
              alert(response.data.message)
            }
          })
          .catch(function(error) {
            alert("Error reserving for show with badge :(")
            console.log(error)
            this.reset()
          })
      },
      reset() {
        this.state = 0
        this.showUrl = false
        // Keep the same email address for convenience!
        this.quantity = 1
      },
      formatActType(type) {
        return type == 'Individual'
          ? 'Sketch'
          : type
      }
    }
  })