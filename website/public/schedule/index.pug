extends ../../_layout
block content
  .container-fluid
    .row
      .col.text-center
        h1.display-3.mb-2.text-uppercase Schedule
    #schedule
      modal(:show="modalModel")
      .row
        .col.text-center
          p.mb-0 Online sales for each show end one hour before show time.
          p.mb-0 Tickets will also be for sale at the venue's box office.
          p You must show up 10 minutes before show time to claim your ticket.
          //p.mb-0 You can make reservations online with a badge.
          //p You will be able to buy individual tickets closer to the festival.
      .row
        .col
          .tabs
            ul.nav.nav-pills
              li.nav-item(v-for="(day, index) in schedule",:key="index")
                a.nav-link(:class="{'active': selectedDay == day.name}" href="#" @click.prevent="selectedDay = day.name") {{formatDay(day.name)}}
            .tab-content
              .tab-pane.show.active(v-for="day in schedule" v-show="selectedDay == day.name")
                ul.list-unstyled.d-flex.flex-wrap.justify-content-around
                  li.venue(v-for="venue in day.venues")
                    h3 {{formatVenue(venue)}}
                    ul.list-unstyled
                      li.showy.text-center(v-for="show in getShowsByDayAndVenue(day.name, venue)" @click="clicky(show)")
                        .mb-1
                          span.time {{show.startTime | time}} to {{show.endTime | time}}
                        .media.mb-2(v-if="show.host")
                          .media-body.align-self-center
                            small Hosted by {{show.host.name}}
                        ul.list-unstyled
                          li.media(v-for="act in show.acts")
                            img(:src="'https://i.imgur.com/' + act.image.id + 's.jpg'")
                            .media-body.ml-2.align-self-center(style="line-height: 1")
                              span.act-name {{act.name}}
                              br
                              span.act-location(v-if="act.city && act.city != 'Austin'") {{act.city}}, {{act.state}}
                        .text-center(v-if="show.remaining <= 0")
                          span.sold-out Sold out!

  include modal
  link(href="/css/schedule.css" rel="stylesheet")
  script.
    let schedule = new Vue({
      el: "#schedule",
      data() {
        return {
          shows: [],
          modalModel: {},
          isModalVisible: false,
          selectedDay: 'Tuesday', //['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][new Date().getDay()],
          days: ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'],
          venues: ['Hideout Up', 'Hideout Down', 'ColdTowne', 'Fallout', 'Velveeta', 'North Door'],
          schedule: [
            {name: 'Tuesday',    venues: ['Hideout Up', 'Hideout Down', 'Fallout']},
            {name: 'Wednesday',  venues: ['Hideout Up', 'Hideout Down', 'Fallout']},
            {name: 'Thursday',   venues: ['Hideout Up', 'Hideout Down', 'ColdTowne', 'Fallout', 'Velveeta']},
            {name: 'Friday',     venues: ['Hideout Up', 'Hideout Down', 'ColdTowne', 'Fallout', 'Velveeta']},
            {name: 'Saturday',   venues: ['Hideout Up', 'Hideout Down', 'ColdTowne', 'Velveeta']},
            {name: 'Sunday',     venues: ['North Door', 'Hideout Down', 'Fallout', 'Velveeta']},
            {name: 'Monday',     venues: ['Hideout Up', 'Hideout Down']},
          ]
        }
      },
      filters: {
        time(value) {
          value = String(value)
          return value.slice(0, value.length-2) + ":" + value.slice(value.length-2) + "pm"
        }
      },
      methods: {
        clicky(show) {
          this.modalModel = show
          document.body.classList.add('modal-open')
          let backdrop = document.createElement('div')
          backdrop.classList.add('modal-backdrop', 'show')
          backdrop.id = "modal-backdrop"
          document.body.appendChild(backdrop)
          document.getElementById('show-modal').style.display = "block"
        },
        getShowsByDayAndVenue(day, venue) {
          return this.shows.filter(s=> s.day == day && s.venue == venue)
        },
        formatVenue(venue) {
          switch(venue) {
            case 'Hideout Up':        return 'Hideout Theatre Upstairs'
            case 'Hideout Down':      return 'Hideout Theatre Downstairs'
            case 'ColdTowne':         return 'ColdTowne Theater'
            case 'Fallout':           return 'Fallout Theater'
            case 'Velveeta':          return 'Velveeta Room'
            default:                  return venue
          }
        },
        formatDay(day) {
          switch(day) {
            case 'Tuesday':   return 'Tue, Aug. 27th'
            case 'Wednesday': return 'Wed, Aug. 28th'
            case 'Thursday':  return 'Thu, Aug. 29th'
            case 'Friday':    return 'Fri, Aug. 30th'
            case 'Saturday':  return 'Sat, Aug. 31st'
            case 'Sunday':    return 'Sun, Sep. 1st'
            case 'Monday':    return 'Mon, Sep. 2nd'
          }
        }
      },
      created() {
        let self = this
        axios
          .get('/api/shows')
          .then(function(response) {
            self.shows = response.data
          })
      }
    })