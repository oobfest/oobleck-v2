extends ../../_layout
block content
  .container-fluid
    .row#app
      .col-md-6.mx-auto.pb-5.mt-5(v-if="updated")
        .box-head.box-head-accent-oob
        .box-block
          p Your submission has been updated!
          .text-center
            button.btn.btn-lg.btn-primary(onClick="window.location.reload()") Update Again
      .col-md-8.mx-auto.pb-5.mt-5(v-else)
        .box-head.box-head-accent-oob
        .box-block(v-if="updated")
          p Your submission has been updated!
        .box-block(v-if="found")
          h2 {{submission.name}}

        .box-block.box-bt
          h3.mb-4 Act Details
          div(v-show="updated==false")
            .box-block(v-show="validationErrors.length > 0")
              .alert.alert-danger
                h4#errors.alert-heading Required Fields Missing
                ul
                    li(v-for="validationError in validationErrors") {{validationError}}


          .form-group
            label.col-form-label(for="act-name") Group or Performer Name
            input#act-name.form-control(type="text" required autofocus name="act-name" maxlength="280" v-model.trim="submission.name" disabled)
          .form-group
            label.col-form-label(for="show-title") Show Title
            small.form-text.text-muted Only fill this out if your show title should be different from your group or performer name.
            input#show-title.form-control(type="text" required autofocus name="show-title" maxlength="280" v-model.trim="submission.showTitle")
          .form-group
            label.col-form-label.required-field(for="public-description") Public act description
            small.form-text.text-muted This content will be published on our website and programs. Use third person active voice, e.g. "Miller &amp; Lies is..."
              a(href="#" @click.prevent="seeExample = !seeExample") See an example
            small.form-text.font-italic(v-show="seeExample") "Miller &amp; Lies is a comedy duo that performs a single story with awkward, emotionally vulnerable oddball characters. They've been doing improv together for ten years. Come hang with them and feel your feelings."
            textarea#public-description.form-control(maxlength="14000" name="public-description" required v-model="submission.publicDescription")
        .box-block.box-bt
          h3 Primary Location
          .form-group
            include ../act-submission-form/primary-location/countries-dropdown
          .form-group(v-if="submission.country == 'US'")
            include ../act-submission-form/primary-location/states-dropdown
          .form-group(v-else)
            label.col-form-label(for="province") State / Territory / Province
            input#province.form-control(type="text" name="province" maxlength="280" v-model="submission.state")
          .form-group
            label.col-form-label.required-field(for="city") City
            input#city.form-control(type="text" name="city" required maxlength="280" v-model="submission.city")
          .form-group
            label.col-form-label(for="home-theater") What venue, theater or club are you associated with?
            small.form-text.text-muted Leave blank if not applicable.
            small.form-text.text-muted Just a single name is needed. Please do not write a short story about how and why no one place truly represents you.
            input#home-theater.form-control(type="text" name="home-theater" maxlength="280" v-model="submission.home")

        .box-block.box-bt
          h3 Image Upload
          p Accepted acts will have their submitted photo used for the festival website, trading cards and programs.
          h4 Image Criteria
          ul
            li Image should be very large,
              em at least
              |  600 &times; 600 pixels
            li The uploaded file size needs to be under 10MB (use JPEG!)
            li Photos preferred; graphics or logos are fine but&nbsp;
              em no text
              | .

          input#image-url(type="hidden" name="image-url" v-model="submission.image.url")
          input#delete-image-url(type="hidden" name="delete-image-url" v-model="submission.image.deleteUrl")

          .custom-file(v-show="!submission.image.processed")
            input#image-upload-input.custom-file-input(type="file" accept="image/*" @change="imageUpload")
            label.custom-file-label.reqiured-field(for="file-input") Select Image

          p.form-text
            em Image hosting powered by&nbsp;
              a(href="https://imgur.com/" target="_blank") Imgur

          .progress-block(v-show="!submission.image.processed")
            .progress(v-show="submission.image.progress > 0")
              .progress-bar.bg-primary(:style="{width: submission.image.progress + '%'}")
            p(v-show="submission.image.progress == 100") Waiting for response from Imgur...

          .box-banner(v-show="submission.image.processed")
            img#image-preview.box-banner-image(:src="submission.image.url" alt="Image preview")

          p.text-right.mt-2(v-show="submission.image.processed")
            a.btn.btn-danger(:href="submission.image.deleteUrl" target="_blank" @click="removeImage") Delete

        include ../act-submission-form/04-personnel
        include ../act-submission-form/05-contact-information

        .box-block.box-bt(v-if="!isStandup")
          h3 Performance Requirements&nbsp;
            small (Improv &amp; Sketch Only)
          .form-group
            label.col-form-label(for="special-requirements") What are the essential requirements you'll need from us for your act? Examples include video projection, sound effects, props (that you can't bring yourself) furniture and equipment. Please be specific!
            textarea#special-requirements.form-control(maxlength="1500" name="special-requirements" rows=4 v-model="submission.specialRequirements")
          .form-group
            .custom-control.custom-checkbox
              input#no-food.custom-control-input(type="checkbox" value="true" name="no-food" v-model="submission.notMessy")
              label.custom-control-label(for="no-food") This show does not include food, liquid or anything else that will make a mess on stage.
          .form-group
            .custom-control.custom-checkbox
              input#musician-required-checkbox.custom-control-input(type="checkbox" value="musician-required" v-model="musicianRequired")
              label.custom-control-label(for="musician-required-checkbox") We require a musician and will not be bringing our own.
          .form-group(v-show="musicianRequired")
            label.col-form-label(for="musician-needs") What are your musician needs?
            input#musician-needs.form-control(type="text" name="musician-needs" maxlength=1400 v-model="submission.musicianNeeds")



        include ../act-submission-form/08-social-media

        .box-block.box-bt
          .text-center
            button.btn.btn-lg.btn-primary(@click="submit" type="button") Update

  script.

    let app = new Vue({
      el: "#app",
      data() { return {
        found: false,
        seeExample: false,
        socialMediaKey: 0,
        videoUrlKey: 0,
        personnelKey: 0,
        uploadState: 0,
        updated: false,
        validationErrors: [],
        junk: 0,
        musicianRequired: false,
        submission: {
          submissionDate: null,
          id: null,
          name: "",
          showTitle: "",
          publicDescription: "",
          country: 'US',
          state: "TX",
          city: "",
          home: "",
          contact: {
            name: "",
            email: "",
            phone: "",
            role: "Performer",
            attending: true,
          },
          personnel: [],
          specialRequirements: "",
          musicianNeeds: "",
          notMessy: false,
          image: {
            processed: true,
            progress: 0,
            id: null,
            url: null,
            deleteUrl: null
          },
          socialMedia: [],
        }
      }},
      computed: {
        charge() {
          return this.submission.personnel.length > 2 ? 4500 : 2500
        },
        isStandup() {
          return this.submission.showType && this.submission.showType.includes('Standup')
        }
      },
      methods: {
        promoCodeHandler() {
          axios
            .post('/api/act-submissions/promo-code/', {submissionId: this.submission.id, promoCode: this.promoCode})
            .then(response=> {
              if(response.data.paid) this.submission.paid = true
              else alert("Promo code is invalid")
            })
            .catch(error=> {
              console.log(error)
            })
        },
        stripeHandler() {
          handler.open({
            name: 'Out Of Bounds Comedy',
            description: 'Application Fee',
            amount: app.charge
          })
        },
        validate() {
          let validationErrors = []
          if(this.submission.name == '') validationErrors.push("Group or performer name is required")
          if(this.submission.showType.length <= 0) validationErrors.push("Please select at least one show type")
          if(this.submission.privateDescription == '') validationErrors.push("'Describe Your Act To Us' cannot be blank")
          if(this.submission.publicDescription == '') validationErrors.push("'Describe Your Act To The Public' cannot be blank")
          if(this.submission.country == '') validationErrors.push("Country is required")
          if(this.submission.city == '') validationErrors.push("City is required")

          if(this.submission.image.id == null) validationErrors.push("Submission must include uploaded image")

          if(this.submission.contact.name == '') validationErrors.push("Submission contact name is required")
          if(this.submission.contact.email == '') validationErrors.push("Submission contact email is required")
          if(this.submission.contact.phone == '') validationErrors.push("Submission contact phone is required")
          if(this.submission.personnel.length <= 0) validationErrors.push("You must list everyone attending the festival under 'Cast & Crew'")

          if(this.submission.minimumLength < 0) validationErrors.push("Minimum set length must be greater than zero")
          if(this.submission.maximumLength < 0) validationErrors.push("Maximum set length must be greater than zero")
          if(this.submission.minimumLength > 1440) validationErrors.push("Minimum set length can't be more than 24 hours")
          if(this.submission.maximumLength > 1440) validationErrors.push("Maximum set length can't be more than 24 hours")
          if(this.submission.minimumLength > this.submission.maximumLength) validationErrors.push("Maximum set length can't be less than minimum set length")
          if(this.submission.notMessy == false) validationErrors.push("Under 'Performance Requirements' you must agree not to have a show with food or liquid")
          if(this.submission.videoUrl == '') validationErrors.push("At least one URL to a submission video is required")

          for(let socialMedia of this.submission.socialMedia) {
            if(socialMedia.url == '') validationErrors.push(`The "${socialMedia.type}" social media field cannot be left blank`)
          }

          if(this.submission.availability.length <= 0) validationErrors.push("Under 'Availability' no days are selected")
          if(this.submission.travelAgreement == '') validationErrors.push("A response to the travel agreement is required")

          return validationErrors
        },
        submit() {
          let self = this
          self.validationErrors = self.validate()

          if(self.validationErrors.length == 0) {
            axios
              .put('/api/act-submissions/' + self.submission._id, self.submission)
              .then((response)=> {
                self.updated = true
                self.submission.id = response.data._id
              })
              .catch((error)=> {
                console.log("ERROR")
                console.log(error)
              })
          }
          else {
            let errorsElement = document.getElementById("errors")
            window.scrollTo({top: 0})
            errorsElement.scrollIntoView({behavior: "smooth"})
          }
        },
        addPersonnel() {
          this.submission.personnel.push({
            id: this.personnelKey++,
            name: "",
            role: "Performer",
            email: ""
          })
        },
        removePersonnel(id) {
          let index = this.submission.personnel.map(p=> p.id).indexOf(id)
          Vue.delete(this.submission.personnel, index)
        },
        addSocialMedia() {
          this.submission.socialMedia.push({
            id: this.socialMediaKey++,
            type: "Website",
            url: "",
            placeholder: "https://"
          })
        },
        updateSocialMedia(socialMedia) {
          if(socialMedia.type == 'Website') socialMedia.placeholder = 'https://'
          if(socialMedia.type == 'Twitter') socialMedia.placeholder = 'https://twitter.com/'
          if(socialMedia.type == 'Facebook') socialMedia.placeholder = 'https://www.facebook.com/'
          if(socialMedia.type == 'YouTube') socialMedia.placeholder = 'https://www.youtube.com/channel/'
          if(socialMedia.type == 'Instagram') socialMedia.placeholder = 'https://www.instagram.com/'
          if(socialMedia.type == 'Snapchat') socialMedia.placeholder = 'https://www.snapchat.com/add/'
          if(socialMedia.type == 'Other') socialMedia.placeholder = 'https://'
        },
        removeSocialMedia(id) {
          let index = this.submission.socialMedia.map(sm=> sm.id).indexOf(id)
          Vue.delete(this.submission.socialMedia, index)
        },
        addExtraVideoUrl() {
          this.submission.extraVideoUrls.push({
            id: this.videoUrlKey++,
            value: ""
          })
        },
        removeExtraVideoUrl(id) {
          let index = this.submission.extraVideoUrls.map(evu=> evu.id).indexOf(id)
          Vue.delete(this.submission.extraVideoUrls, index)
        },
        uploadProgress(event) {
          if (event.lengthComputable) {
            this.submission.image.progress = parseInt((event.loaded / event.total) * 100)
          }
        },
        removeImage() {
          this.submission.image.processed = false
          this.submission.image.progress = 0
          this.submission.image.id = null
          this.submission.image.url = null
          this.submission.image.deleteUrl = null
        },
        imageUpload(event) {
          let image = event.target.files[0]
          if(image.size > (1024 * 1000 * 10)) {
            alert("Image cannot be larger than 10MB")
          }
          else {
            formData = new FormData()
            formData.append('image', image)
            let url = 'https://imgur-apiv3.p.mashape.com/3/image'
            let onUploadProgress = this.uploadProgress
            let headers = {
              'X-mashape-Key': 'MeRL1vcC70mshcx4yVw7R4jv88gnp11IPvPjsn4GKcdklk5FiE',
              'Authorization': 'Client-ID c60e83c906306c5'
            }
            let self = this
            axios.post(url, formData, { onUploadProgress, headers })
              .then(function (response) {
                let data = response.data.data  // lol
                self.submission.image.deleteUrl = 'https://imgur.com/delete/' + data.deletehash
                self.submission.image.id = data.id
                self.submission.image.url = data.link
                self.submission.image.processed = true
              })
              .catch(function (error) {
                alert("Image upload failed 😭")
                console.log(error)
              })
          }
        }
      },
      created() {
        let self = this
        axios.get('/api/act-submissions/edit-public/#{submissionId}')
          .then((response)=> {
            if(response.data != null) {
              self.found = true
              self.submission = response.data
              if(self.submission.image.id) self.submission.image.processed = true
              if(self.submission.musicianNeeds) self.musicianRequired = true
            }
          })
          .catch((error)=> {
            console.log(error)
          })
      }
    })