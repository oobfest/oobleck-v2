script(src="https://checkout.stripe.com/checkout.js")
#reserve
  section(v-if="remaining == 0 && !auditing")
    .text-center
      h3 This workshop is sold out!
      p No more audit slots available.
  section(v-else-if="boxOfficeClosed")
    .text-center
      p Online sales for this workshop have ended.
  section.text-center(v-else-if="state==0 && remaining > 0")
    button.btn.btn-primary.btn-lg(type="button" @click="state=3") Attend Workshop â€“ ${{workshop.price}}
    //- p.mt-2(v-if="workshop.teacher != 'Scott Adsit'") Special early bird price until August 16th! (Normally $65)
  section(v-else-if="state == 0 && auditing")
    .text-center
      h3 Audit slots are still available.
      button.btn.btn-primary.btn-lg(type="button" @click="state=3") Audit Workshop â€“ ${{workshop.auditPrice}}
    .font-italic.mt-2
      p Auditor slots are offered for sold out workshops, allowing people to attend in a strictly audience capacity. You will be able to watch the workshop, but not able to directly participate.
      p If any registrants to the workshop fail to show up or otherwise forfeiting their slot, auditors will have the opportunity to upgrade into those slots.
  section(v-show="state==1")
    .form-group
      label Badge Email
      input.form-control(type="email" v-model="email")
    .form-group
      label Quantity
      select.custom-select(v-model="quantity")
        option 1
        option 2
        option 3
    .text-right
      button.btn.btn-lg.btn-primary(type="button" @click="reserveWithBadge(workshop._id)") Make Reservation
  section(v-show="state==2")
    .text-center
      h2 Success!
      p A confirmation email has been sent to &nbsp;
        span.code {{email}}
  section(v-show="state==3")
    .form-group
      label(for="name") Name(s)
      input#paypal-name.form-control(type="text" v-model="ticket.name")
      small.form-text Please list the names of each person that would be attending this workshop.
    .form-group
      label(for="phone") Phone Number
      input#paypal-phone.form-control(type="tel" v-model="ticket.phone")
    .form-group
      label(for="quantity") Quantity
      select#paypal-quantity.custom-select(name="quantity" v-model="ticket.quantity")
        option(v-for="n in quantityToSell") {{n}}
    .form-group.text-center
      button.btn.btn-lg.btn-primary(type="button" @click="state=0") Back
      | &nbsp;
      button#stripe-button.btn.btn-lg.btn-primary(@click.prevent="stripeHandler") Pay with Stripe
    .row
      .col.text-center
        img(src="/img/powered-by-stripe.svg" height="55px")
    .text-right

script.
  let handler = StripeCheckout.configure({
    //key: 'pk_test_vSOv2tJVVsBEI6PZJLJBNiOW',
    key: 'pk_live_iR3EiMyek6fnYWIoFptERALW',
    image: '/img/oob-logo-fire.jpg',
    locale: 'auto',
    zipCode: true,
    currency: 'usd',
    allowRememberMe: true,
    token: function(token) {
      reserve.ticket.email = token.email
      reserve.email = token.email
      let data = { token, ticket: reserve.ticket, auditing: reserve.auditing }
      axios
        .post('/api/stripe/workshop/' + reserve.workshop._id, data)
        .then(response=>{
          if(response.data.paid) {
            reserve.state = 2
          }
          else alert("Payment failed ðŸ˜Ÿ")
        })
        .catch(error=> {
          console.log("ERROR :(")
          console.log(error)
        })
    }
  })


  let reserve = new Vue({
    el: "#reserve",
    data() {
      return {
        workshop: {},
        state: 0,
        email: "",
        quantity: 1,
        showUrl: false,
        ticket: {
          name: '',
          phone: '',
          quantity: 1
        }
      }
    },
    computed: {
      remaining() {
        return this.workshop.capacity - this.workshop.sold
      },
      auditRemaining() {
        return this.workshop.auditCapacity - this.workshop.auditSold
      },
      auditing() {
        return (this.remaining <= 0) && (this.auditRemaining > 0)
      },
      boxOfficeClosed() {
        // Todo: Update!
        return false

        // When it is the week of the festival:
        let now = new Date()
        let nowDay = now.getDay() <= 1 ? now.getDay() + 5 : now.getDay() - 2
        let nowTime = ( (now.getHours() - 11) * 100) + now.getMinutes()
        let showDay = ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday'].indexOf(this.workshop.day)
        let showTime = this.workshop.time
        return (nowDay > showDay) || ((nowDay == showDay) && (nowTime >= showTime))
      },
      quantityToSell() {
        if(this.auditing && this.auditRemaining) return Math.min(this.auditRemaining, 5)
        else if(this.remaining) return Math.min(this.remaining, 5)
        else return 0
      },
    },
    methods: {
      isValid() {
        return this.ticket.name != '' && this.ticket.phone != ''
      },
      stripeHandler() {
        if (this.isValid()) {
          handler.open({
            name: 'Out Of Bounds Comedy',
            description: this.workshop.name + " Workshop",
            amount: ( (this.auditing ? this.workshop.auditPrice : this.workshop.price) * this.ticket.quantity) * 100
          })
        }
        else alert("All fields are required!")
      },
      paid(email) {
        this.email = email
        this.state = 2
      },
      reset() {
        this.state = 0
        this.showUrl = false
        // Keep the same email address for convenience!
        this.quantity = 1
      },
    },
    created() {
      let workshopId = '#{workshop._id}'
      let self = this
      axios.get('/api/workshops/public/' + workshopId)
        .then(response=> {
          self.workshop = response.data
        })
        .catch(error=> {
          console.log(error)
        })
    }
  })