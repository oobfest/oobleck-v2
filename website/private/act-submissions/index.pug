extends ../../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Act Submissions
    a.btn.btn-primary.ml-md-auto(href="/apply") Apply

  #app.dash-boxes.container-fluid
    .dash-boxes.container-fluid
      .row
        .col
          ul.nav.nav-pills
            li.nav-item
              a.nav-link.active(data-toggle="tab" href="#submissions") Submissions
            //li.nav-item
              a.nav-link(data-toggle="tab" href="#charts") Charts
            //li.nav-item
              a.nav-link(data-toggle="tab" href="#reviews") Reviews
          .tab-content
            
            #submissions.tab-pane.fade.show.active
              .box.box-b
                table.box-table.table
                  thead
                    tr
                      th 
                        a(href="#" @click.prevent="sortField='name'") Name
                      th Scores
                      th Type
                      th 
                        a(href="#" @click.prevent="sortField='city'") City
                      th 
                        a(href="#" @click.prevent="sortField='home'") Home
                    tr
                      td
                        input.form-control(type="text" v-model="nameSearch")
                      td &nbsp;
                      td
                        select.form-control(v-model="typeSearch")
                          option(selected value="") All
                          option Improv
                          option Sketch
                          option Standup
                          option Variety
                          option Podcast
                          option(value="One-person-show") Individual
                          option Musical
                          option Other
                      td
                        input.form-control(type="text" v-model="citySearch")
                      td
                        input.form-control(type="text" v-model="homeSearch")

                  tbody(is="submission-row" v-for="(submission, index) in filteredSubmissions" v-bind="submission" v-bind:key="submission._id" @removed="remove")
            
            #charts.tab-pane.fade
              p Charts

            #reviews.tab-pane.fade
              p Reviews

  include templates/submission-row-template

  script.

    Vue.component('submission-row', {
      props: [
      '_id', 
      'name', 
      'showTitle', 
      'home', 
      'city', 
      'state', 
      'country', 
      'showType', 
      'privateDescription', 
      'publicDescription', 
      'accolades',
      'contact',
      'personnel',
      'minimumLength',
      'maximumLength',
      'specialRequirements',
      'videoUrls',
      'videoInfo',
      'availability',
      'image'
      ],
      template: "#submission-row-template",
      data() { return {
          visible: false
      }},
      computed: {
        imageUrl() {
          return `https://i.imgur.com/${this.image.id}s.jpg`
        }
      },
      methods: {
        remove(name, id) {
          let self = this
          if(confirm("Delete " + name + "?")) {
            axios.delete('/api/act-submissions/' + id)
              .then((response)=> {
                self.visible = false
                self.$emit('removed', id)
              })
              .catch((error)=> {
                console.log(error)
              })
          }
        },
      }
    })

    let vue = new Vue({
      el: "#app",
      data() { return {
        tab: "submissions",
        nameSearch: "",
        typeSearch: "",
        citySearch: "",
        homeSearch: "",
        sortField: "name",
        submissions: []
      }},
      computed: {
        filteredSubmissions() {
          let filteredSubmissions = this.submissions
          if(this.nameSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.name.includes(this.nameSearch))
          if(this.typeSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.showType.includes(this.typeSearch))
          if(this.citySearch) filteredSubmissions = filteredSubmissions.filter(s=> s.city.includes(this.citySearch))
          if(this.homeSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.home.includes(this.homeSearch))

          filteredSubmissions.sort((a, b)=> {
            let textA = a[this.sortField].toUpperCase()
            let textB = b[this.sortField].toUpperCase()
            if(textA < textB) return -1
            else if (textA > textB) return 1
            else return 0
          })

          return filteredSubmissions
        }
      },
      methods: {
        remove(id) {
          let index = this.submissions.findIndex(s=> s._id == id)
          this.submissions.splice(index, 1)
        }
      },
      created() {
        let self = this
        axios.get('/api/act-submissions')
          .then((response)=> {
            self.submissions = response.data
          })
          .catch((error)=> {
            console.log(error)
          })
      }
    })