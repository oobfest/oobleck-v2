extends ../../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Act Submissions
    a.btn.btn-primary.ml-md-auto(href="/apply") Apply

  #app.dash-boxes.container-fluid
    .dash-boxes.container-fluid
      .row
        .col

          ul.nav.nav-pills
            li.nav-item
              a.nav-link(:class="tab=='submissions' ? 'active' : ''" href="#" @click.prevent="tab='submissions'") Submissions
            li.nav-item
              a.nav-link(:class="tab=='charts' ? 'active' : ''" href="#" @click.prevent="tab='charts'") Charts

          .tab-content
            include tabs/submissions
            include tabs/charts

  include templates/submission-row-template
  include templates/charts-scripts


  script.

    Vue.component('submission-row', {
      props: [
      '_id',
      'name',
      'showTitle',
      'home',
      'city',
      'state',
      'country',
      'showType',
      'privateDescription',
      'publicDescription',
      'accolades',
      'contact',
      'personnel',
      'minimumLength',
      'maximumLength',
      'specialRequirements',
      'videoUrls',
      'videoInfo',
      'availability',
      'image',
      'usedPromo',
      'payment'
      ],
      template: "#submission-row-template",
      data() { return {
          visible: false
      }},
      computed: {
        imageUrl() {
          return `https://i.imgur.com/${this.image.id}s.jpg`
        }
      },
      methods: {
        remove(name, id) {
          let self = this
          if(confirm("Delete " + name + "?")) {
            axios.delete('/api/act-submissions/' + id)
              .then((response)=> {
                self.visible = false
                self.$emit('removed', id)
              })
              .catch((error)=> {
                console.log(error)
              })
          }
        },
      }
    })

    let vue = new Vue({
      el: "#app",
      data() { return {
        tab: "submissions",
        nameSearch: "",
        typeSearch: "",
        citySearch: "",
        homeSearch: "",
        sortField: "name",
        submissions: []
      }},
      computed: {
        filteredSubmissions() {
          let filteredSubmissions = this.submissions
          if(this.nameSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.name.includes(this.nameSearch))
          if(this.typeSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.showType.includes(this.typeSearch))
          if(this.citySearch) filteredSubmissions = filteredSubmissions.filter(s=> s.city.includes(this.citySearch))
          if(this.homeSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.home.includes(this.homeSearch))

          filteredSubmissions.sort((a, b)=> {
            let textA = a[this.sortField].toUpperCase()
            let textB = b[this.sortField].toUpperCase()
            if(textA < textB) return -1
            else if (textA > textB) return 1
            else return 0
          })

          return filteredSubmissions
        }
      },
      methods: {
        remove(id) {
          let index = this.submissions.findIndex(s=> s._id == id)
          this.submissions.splice(index, 1)
        }
      },
      created() {
        let self = this
        axios.get('/api/act-submissions')
          .then((response)=> {
            self.submissions = response.data
          })
          .catch((error)=> {
            console.log(error)
          })
      }
    })