extends ../../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Act Submissions
    a.btn.btn-primary.ml-md-auto(href="/apply") Apply

  #app.dash-boxes.container-fluid
    .dash-boxes.container-fluid
      .row
        .col

          ul.nav.nav-pills
            li.nav-item
              a.nav-link(:class="tab=='submissions' ? 'active' : ''" href="#" @click.prevent="tab='submissions'") Submissions
            li.nav-item
              a.nav-link(:class="tab=='hometowns' ? 'active' : ''" href="#" @click.prevent="tab='hometowns'") Hometowns
            li.nav-item
              a.nav-link(:class="tab=='charts' ? 'active' : ''" href="#" @click.prevent="tab='charts'") Charts
            li.nav-item
              a.nav-link(:class="tab=='performers' ? 'active' : ''" href="#" @click.prevent="tab='performers'") Performers

          .tab-content
            include tabs/submissions
            include tabs/hometowns
            include tabs/charts
            include tabs/performers

  include templates/submission-row-template
  include templates/charts-scripts

  script.

    let vm = new Vue({
      //el: "#vue-app",
      data() {
        return {
          submissions: [],
          hasChanged: []
        }
      },
      methods: {
        standardize(submission, key) {
          let objectId = submission.objectId
          let city = submission.city
          let state = submission.state
          let theater = submission.homeTheater
          axios
            .post('/api/submissions/standardize', {objectId: submission._id, city: city, state: state, theater: theater})
            .then((response)=> {
              Vue.set(this.hasChanged, key, false)
            })
            .catch((error)=> {alert("Failed to update 😖"); console.log(error)})
        },
        trackChange(key) {
          Vue.set(this.hasChanged, key, true)
         }
      },
      filters: {
        shorten(value, characters) {
        return value.length > characters
          ? value.substring(0,characters)+'...'
          : value
        }
      },
      mounted() {
        let self = this
        axios
          .get('/api/submissions/getAllPaid')
          .then(function(response) {
            self.submissions = response.data
          })
          .catch(function(error) {
            self.submissions = []
          })
      }
    })

    Vue.component('submission-row', {
      props: [
      '_id',
      'name',
      'showTitle',
      'home',
      'city',
      'state',
      'country',
      'showType',
      'privateDescription',
      'publicDescription',
      'accolades',
      'contact',
      'personnel',
      'minimumLength',
      'maximumLength',
      'specialRequirements',
      'videoUrls',
      'videoInfo',
      'availability',
      'image',
      'usedPromo',
      'paid',
      'reviews'
      ],
      template: "#submission-row-template",
      data() { return {
          visible: false
      }},
      computed: {
        imageUrl() {
          return `https://i.imgur.com/${this.image.id}s.jpg`
        }
      },
      filters: {
        emojify(value) {
          switch(value) {
            case -1: return '😡'
            case  0: return '😕'
            case  1: return '😬'
            case  2: return '🙂'
            case  3: return '😍'
            default: return ''
          }
        }
      },
      methods: {
        updateHome() {
          this._id
          let newHome = prompt(`Change the hometown of "${this.name}"`, this.home)
          if(newHome != null) {
            alert(newHome)
          }
        },
        getScores() {
          return this.reviews.map(r=> r.score)
        },
        remove(name, id) {
          let self = this
          if(confirm("Delete " + name + "?")) {
            axios.delete('/api/act-submissions/' + id)
              .then((response)=> {
                self.visible = false
                self.$emit('removed', id)
              })
              .catch((error)=> {
                console.log(error)
              })
          }
        },
      }
    })

    let vue = new Vue({
      el: "#app",
      data() { return {
        tab: "submissions",
        showPaid: true,
        nameSearch: "",
        typeSearch: "",
        citySearch: "",
        homeSearch: "",
        hometownFilter: 1,
        theaterFilter: 1,
        sortField: "name",
        submissions: [],
        hasChanged: []
      }},
      computed: {
        performers() {
          let performers = []
          for (let submission of this.submissions) {
            for(let performer of submission.personnel) {
              performers.push({
                name: performer.name,
                email: performer.email,
                role: performer.role,
                showName: submission.name,
                showType: submission.showType.join(', '),
                location: submission.city + ", " + submission.state
              })
            }
          }
          return performers
        },
        filteredSubmissions() {
          let filteredSubmissions = this.submissions.filter(s=> s.paid == this.showPaid)
          if(this.nameSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.name.includes(this.nameSearch))
          if(this.typeSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.showType.includes(this.typeSearch))
          if(this.citySearch) filteredSubmissions = filteredSubmissions.filter(s=> s.city.includes(this.citySearch))
          if(this.homeSearch) filteredSubmissions = filteredSubmissions.filter(s=> s.home.includes(this.homeSearch))

          filteredSubmissions.sort((a, b)=> {
            let textA = a[this.sortField].toUpperCase()
            let textB = b[this.sortField].toUpperCase()
            if(textA < textB) return -1
            else if (textA > textB) return 1
            else return 0
          })

          return filteredSubmissions
        }
      },
      watch: {
        hometownFilter: function(value) {
          drawChart(cityChart.chart, createDataView(cityChart.data, parseInt(value)))
        },
        theaterFilter: function(value) {
          drawChart(theaterChart.chart, createDataView(theaterChart.data, parseInt(value)))
        }
      },
      methods: {
        remove(id) {
          let index = this.submissions.findIndex(s=> s._id == id)
          this.submissions.splice(index, 1)
        },
        standardize(submission, key) {
          let city = submission.city
          let state = submission.state
          let home = submission.home
          axios
            .put('/api/act-submissions/' + submission._id, {city, state, home})
            .then((response)=> {
              Vue.set(this.hasChanged, key, false)
            })
            .catch((error)=> {alert("Failed to update 😖"); console.log(error)})
        },
        trackChange(key) {
          Vue.set(this.hasChanged, key, true)
         }
      },
      created() {
        let self = this
        axios.get('/api/act-submissions')
          .then((response)=> {
            self.submissions = response.data
          })
          .catch((error)=> {
            console.log(error)
          })
      }
    })