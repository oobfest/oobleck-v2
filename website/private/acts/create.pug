extends ../../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title
        a.text-muted(href="/acts") Acts
        |  /
        | Create

  #app.dash-boxes.container-fluid
    div(v-if="!submitted")

      div(v-show="validationErrors.length > 0")
        .alert.alert-danger
          h4#errors.alert-heading Required Fields Missing
          ul
              li(v-for="validationError in validationErrors") {{validationError}}
      .box


        .box-block.box-bx.box-bt
          h3 Act Details
          .form-group
            label.col-form-label(for="act-name") Group or Performer Name
            input#act-name.form-control(type="text" autofocus name="act-name" maxlength="280" v-model.trim="submission.name")
          .form-group
            label.col-form-label(for="show-title") Show Title
            small.form-text.text-muted Only fill if show title is different from group or performer name
            input#show-title.form-control(type="text" autofocus name="show-title" maxlength="280" v-model.trim="submission.showTitle")
          .form-group
            label.col-form-label(for="show-type") Show Type
            small.form-text.text-muted Select all that apply
            .form-check
              input#improv-checkbox.form-check-input(type="checkbox" value="Improv" v-model="submission.showType")
              label.form-check-label(for="improv-checkbox") Improv
            .form-check
              input#sketch-checkbox.form-check-input(type="checkbox" value="Sketch" v-model="submission.showType")
              label.form-check-label(for="sketch-checkbox") Sketch
            .form-check
              input#stand-up-checkbox.form-check-input(type="checkbox" value="Standup" v-model="submission.showType")
              label.form-check-label(for="stand-up-checkbox") Standup
            .form-check
              input#podcast-checkbox.form-check-input(type="checkbox" value="Podcast" v-model="submission.showType")
              label.form-check-label(for="podcast-checkbox") Podcast
            .form-check
              input#musical-checkbox.form-check-input(type="checkbox" value="Musical" v-model="submission.showType")
              label.form-check-label(for="musical-checkbox") Musical
            .form-check
              input#one-person-show-checkbox.form-check-input(type="checkbox" value="One-person-show" v-model="submission.showType")
              label.form-check-label(for="one-person-show-checkbox") One-person Show
            .form-check
              input#variety-checkbox.form-check-input(type="checkbox" value="Variety" v-model="submission.showType")
              label.form-check-label(for="variety-checkbox") Hosted Variety or Panel Show
            .form-check
              input#other-checkbox.form-check-input(type="checkbox" value="Other" v-model="submission.showType")
              label.form-check-label(for="other-checkbox") Other
          .form-group
            label.col-form-label(for="public-description") Public Act Description
            textarea#public-description.form-control(maxlength="1400" name="public-description" v-model="submission.publicDescription")


        .box-block.box-bx.box-bt
          h3 Primary Location
          .form-group
            include ../../public/act-submission-form/primary-location/countries-dropdown
          .form-group(v-if="submission.country == 'US'")
            include ../../public/act-submission-form/primary-location/states-dropdown
          .form-group(v-else)
            label.col-form-label(for="province") State / Territory / Province
            input#province.form-control(type="text" name="province" maxlength="280" v-model="submission.state")
          .form-group
            label.col-form-label(for="city") City
            input#city.form-control(type="text" name="city" maxlength="280" v-model="submission.city")
          .form-group
            label.col-form-label(for="home-theater") What venue, theater or club is the act associated with?
            input#home-theater.form-control(type="text" name="home-theater" maxlength="280" v-model="submission.home")


        .box-block.box-bx.box-bt
          h3 Image Upload
          h4 Image Criteria
          ul
            li Image should be very large,
              em at least
              |  600 &times; 600 pixels
            li The uploaded file size needs to be under 10MB (use JPEG!)
            li Photos preferred; graphics or logos are fine but
              em no text
              | .

          input#image-url(type="hidden" name="image-url" v-model="submission.image.url")
          input#delete-image-url(type="hidden" name="delete-image-url" v-model="submission.image.deleteUrl")

          .custom-file(v-show="!submission.image.processed")
            input#image-upload-input.custom-file-input(type="file" accept="image/*" @change="imageUpload")
            label.custom-file-label.reqiured-field(for="file-input") Select Image

          p.form-text
            em Image hosting powered by&nbsp;
              a(href="https://imgur.com/" target="_blank") Imgur
              | .

          .progress-block(v-show="!submission.image.processed")
            .progress(v-show="submission.image.progress > 0")
              .progress-bar.bg-primary(:style="{width: submission.image.progress + '%'}")
            p(v-show="submission.image.progress == 100") Waiting for response from Imgur...

          .box-banner(v-show="submission.image.processed")
            img#image-preview.box-banner-image(:src="submission.image.url" alt="Image preview")

          p.text-right.mt-2(v-show="submission.image.processed")
            a.btn.btn-danger(:href="submission.image.deleteUrl" target="_blank" @click="removeImage") Delete


        .box-block.box-bx.box-bt
          h3 Cast and Crew
          p Please list everyone that will be attending the festival.
          div(v-for="person in submission.personnel" v-bind:key="person.id")
            .form-group.row
              label.col-form-label.col-2 Name
              input.form-control.col-10(type="text"  maxlength="280" v-model="person.name")
            .form-group.row
              label.col-form-label.col-2 Email
              input.form-control.col-10(type="email" maxlength="280" v-model="person.email")
            .form-group.row
              label.col-form-label.col-2 Role
              select.form-control.col-10(v-model="person.role")
                option Performer
                option Crew
                option Director
                option Producer
                option Other
            .form-group.text-right
              button.btn.btn-danger(type="button" @click="removePersonnel(person.id)") Remove
            hr
          .form-group
            button.btn.btn-secondary(@click="addPersonnel") Add Person


        .box-block.box-bx.box-bt
          h3 Performance Requirements
          h4 Set Length
          .form-group
            label.col-form-label(for="minimum-show-length") Minimum
            .row
              .col-4
                .input-group
                  input#minimum-show-length.form-control(type="number" min="0" max="1440" name="minimum-show-length" value=5 v-model.number="submission.minimumLength")
                  .input-group-append
                    span.input-group-text minutes

          .form-group
            label.col-form-label(for="maximum-show-length") Maximum
            .row
              .col-4
                .input-group
                  input#maximum-show-length.form-control(type="number" min="0" max="1440" name="maximum-show-length" value=60 v-model.number="submission.maximumLength")
                  .input-group-append
                    span.input-group-text minutes
          div(v-if="!isStandup")
            h4 Special Requirements&nbsp;
              small (Improv &amp; Sketch Only)
            .form-group
              label.col-form-label(for="special-requirements") What are essential requirements needed for the act? Examples include video projection, sound effects, props, furniture and equipment.
              textarea#special-requirements.form-control(maxlength="1500" name="special-requirements" rows=4 v-model="submission.specialRequirements")

        .box-block.box-bx.box-bt
          h3 Social Media URLs
          .social-media-item(v-for="socialMedia of submission.socialMedia" v-bind:key="socialMedia.id")
            .form-group
              small.form-text.text-muted Enter a full URL (including https), not just a username
              .input-group
                select.custom-select(name="social-media-type[]" v-model="socialMedia.type" @change="updateSocialMedia(socialMedia)")
                  option Website
                  option Twitter
                  option Facebook
                  option YouTube
                  option Instagram
                  option Snapchat
                  option Other
                input.form-control(:placeholder="socialMedia.placeholder" type="text" name="social-media-url[]" maxlength="280" v-model="socialMedia.url")
            .form-group.text-right
              button.btn.btn-danger(type="button" @click="removeSocialMedia(socialMedia.id)") Remove
            hr
          .form-group
            button.btn.btn-secondary(type="button" @click="addSocialMedia") Add Social Media

        .box-block.box-bx.box-b
          h3 Availability
          p.help-text What days of the festival can the act be scheduled for?
          .form-group
            .custom-control.custom-checkbox
              input#available-tuesday.custom-control-input(type="checkbox" value="tuesday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-tuesday") Tuesday, August 27th
          .form-group
            .custom-control.custom-checkbox
              input#available-wednesday.custom-control-input(type="checkbox" value="wednesday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-wednesday") Wednesday, August 28th
          .form-group
            .custom-control.custom-checkbox
              input#available-thursday.custom-control-input(type="checkbox" value="thursday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-thursday") Thursday, August 29th
          .form-group
            .custom-control.custom-checkbox
              input#available-friday.custom-control-input(type="checkbox" value="friday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-friday") Friday, August 30th
          .form-group
            .custom-control.custom-checkbox
              input#available-saturday.custom-control-input(type="checkbox" value="saturday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-saturday") Saturday, August 31st
          .form-group
            .custom-control.custom-checkbox
              input#available-sunday.custom-control-input(type="checkbox" value="sunday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-sunday") Sunday, September 1st
          .form-group
            .custom-control.custom-checkbox
              input#available-monday.custom-control-input(type="checkbox" value="monday" name="available[]" v-model="submission.availability")
              label.custom-control-label(for="available-monday") Monday, September 2nd

        .mt-3.text-center
          button.btn.btn-lg.btn-primary(@click="submit" type="button") Submit

    div(v-else)
      p Act submitted!

  script.

    let autofill = function() {
      app.submission.name = "RoboGroup " + Math.floor(Math.random() * 100)
      app.submission.showType = ["Improv", "Musical"]
      app.submission.publicDescription = "PubFest"
      app.submission.country = "US"
      app.submission.state = "TX"
      app.submission.city = "Austin"
      app.submission.home = "Showin"
      app.submission.image.processed = true
      app.submission.image.progress = 100
      app.submission.image.id = "dicokAv"
      app.submission.image.url = "https://i.imgur.com/dicokAv.png"
      app.submission.image.deleteUrl = "https://imgur.com/delete/gd622m8PBfIk1tQ"
      app.submission.socialMedia = []
      app.submission.personnel.push({
        id: app.personnelKey++,
        name: 'Garfield',
        email: 'garf@lasagna.com',
        role: 'Performer'
      })
      app.submission.personnel.push({
        id: app.personnelKey++,
        name: 'Odie',
        email: 'odie@lasagna.com',
        role: 'Performer'
      })
      app.submission.personnel.push({
        id: app.personnelKey++,
        name: 'Nermal',
        email: 'nermal@lasagna.com',
        role: 'Crew'
      })
      app.submission.socialMedia.push({
        id: app.socialMediaKey++,
        type: "Snapchat",
        url: "https://snapchat.com/"
      })
      app.submission.socialMedia.push({
        id: app.socialMediaKey++,
        type: "Twitter",
        url: "https://twitter.com/"
      })
    }

    let app = new Vue({
      el: "#app",
      data() { return {
        socialMediaKey: 0,
        videoUrlKey: 0,
        personnelKey: 0,
        uploadState: 0,
        submitted: false,
        validationErrors: [],
        submission: {
          id: null,
          name: "",
          showTitle: "",
          showType: [],
          publicDescription: "",
          country: 'US',
          state: "TX",
          city: "",
          home: "",
          contact: {
            name: "",
            email: "",
            phone: "",
            role: "Performer",
            attending: true,
          },
          personnel: [],
          availability: ['tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'monday'],
          minimumLength: 0,
          maximumLength: 0,
          specialRequirements: "",
          image: {
            processed: false,
            progress: 0,
            id: null,
            url: null,
            deleteUrl: null
          },
          socialMedia: [],
        }
      }},
      computed: {
        isStandup() {
          return this.submission.showType.includes('Standup')
        }
      },
      methods: {
        validate() {
          let validationErrors = []
          if(this.submission.name == '') validationErrors.push("Group or performer name is required")
          if(this.submission.showType.length <= 0) validationErrors.push("Please select at least one show type")
          if(this.submission.publicDescription == '') validationErrors.push("'Describe Your Act To The Public' cannot be blank")
          if(this.submission.country == '') validationErrors.push("Country is required")
          if(this.submission.city == '') validationErrors.push("City is required")
          if(this.submission.image.id == null) validationErrors.push("Submission must include uploaded image")
          if(this.submission.personnel.length <= 0) validationErrors.push("You must list everyone attending the festival under 'Cast & Crew'")
          for(let socialMedia of this.submission.socialMedia) {
            if(socialMedia.url == '') validationErrors.push(`The "${socialMedia.type}" social media field cannot be left blank`)
          }
          return validationErrors
        },
        submit() {
          let self = this
          self.validationErrors = self.validate()

          // Format Video URLs
          let data = self.submission

          if(self.validationErrors.length == 0) {
            axios
              .post('/api/acts/', self.submission)
              .then((response)=> {
                self.submitted = true
                self.submission.id = response.data._id
              })
              .catch((error)=> {
                console.log("ERROR")
                console.log(error)
              })
          }
          else {
            let errorsElement = document.getElementById("errors")
            window.scrollTo({top: 0})
            errorsElement.scrollIntoView({behavior: "smooth"})
          }
        },
        addPersonnel() {
          this.submission.personnel.push({
            id: this.personnelKey++,
            name: "",
            role: "Performer",
            email: ""
          })
        },
        removePersonnel(id) {
          let index = this.submission.personnel.map(p=> p.id).indexOf(id)
          Vue.delete(this.submission.personnel, index)
        },
        addSocialMedia() {
          this.submission.socialMedia.push({
            id: this.socialMediaKey++,
            type: "Website",
            url: "",
            placeholder: "https://"
          })
        },
        updateSocialMedia(socialMedia) {
          if(socialMedia.type == 'Website') socialMedia.placeholder = 'https://'
          if(socialMedia.type == 'Twitter') socialMedia.placeholder = 'https://twitter.com/'
          if(socialMedia.type == 'Facebook') socialMedia.placeholder = 'https://www.facebook.com/'
          if(socialMedia.type == 'YouTube') socialMedia.placeholder = 'https://www.youtube.com/channel/'
          if(socialMedia.type == 'Instagram') socialMedia.placeholder = 'https://www.instagram.com/'
          if(socialMedia.type == 'Snapchat') socialMedia.placeholder = 'https://www.snapchat.com/add/'
          if(socialMedia.type == 'Other') socialMedia.placeholder = 'https://'
        },
        removeSocialMedia(id) {
          let index = this.submission.socialMedia.map(sm=> sm.id).indexOf(id)
          Vue.delete(this.submission.socialMedia, index)
        },
        uploadProgress(event) {
          if (event.lengthComputable) {
            this.submission.image.progress = parseInt((event.loaded / event.total) * 100)
          }
        },
        removeImage() {
          this.submission.image.processed = false
          this.submission.image.progress = 0
          this.submission.image.id = null
          this.submission.image.url = null
          this.submission.image.deleteUrl = null
        },
        imageUpload(event) {
          let image = event.target.files[0]
          if(image.size > (1024 * 1000 * 10)) {
            alert("Image cannot be larger than 10MB")
          }
          else {
            formData = new FormData()
            formData.append('image', image)
            let url = 'https://imgur-apiv3.p.mashape.com/3/image'
            let onUploadProgress = this.uploadProgress
            let headers = {
              'X-mashape-Key': 'MeRL1vcC70mshcx4yVw7R4jv88gnp11IPvPjsn4GKcdklk5FiE',
              'Authorization': 'Client-ID c60e83c906306c5'
            }
            let self = this
            axios.post(url, formData, { onUploadProgress, headers })
              .then(function (response) {
                let data = response.data.data  // lol
                self.submission.image.deleteUrl = 'https://imgur.com/delete/' + data.deletehash
                self.submission.image.id = data.id
                self.submission.image.url = data.link
                self.submission.image.processed = true
              })
              .catch(function (error) {
                alert("Image upload failed 😭")
                console.log(error)
              })
          }
        }
      }
    })