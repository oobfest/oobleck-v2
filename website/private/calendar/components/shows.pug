script#shows-template(type="text/template")
  div
    div(v-for="show in shows")
      .box.show2
        a.delete(v-show="$root.editMode" href="#" @click.prevent="removeShow(show._id)") remove show
        h4.time
          a(href="#" @click.prevent="setStartTime(show._id)") {{show.startTime | time}}
          |  to&nbsp;
          a(href="#" @click.prevent="setEndTime(show._id)") {{show.endTime | time}}
        div(v-if="show.host" v-show="$root.editMode")
          a.delete(href="#" @click.prevent="removeHost(show._id)") remove host
          p
            strong Host:
            | {{show.host.name}}
        div(v-else)
          p(v-show="$root.editMode")
            a(href="#" @click.prevent="setShowId(show._id)" data-toggle="modal" data-target="#add-host-modal") add host
        p.act(v-for="act in show.acts")
          a(href="#" @click.prevent="promptDuration(show, act._id)")
            span.badge.badge-light.code(style="vertical-align: 2px") {{act.duration | duration}}
          | &nbsp;
          span(v-if="act.showType.includes('Improv')") ⚡️
          span(v-if="act.showType.includes('Sketch')") ✏️
          span(v-if="act.showType.includes('Standup')") 🎤
          span(v-if="act.showType.includes('Podcast')") 🎙
          span(v-if="act.showType.includes('Teacher')") 👩🏽‍🏫
          span(v-if="act.showType.includes('Musical')") 🎶
          span(v-if="act.showType.includes('One-person-show')") 🗣
          span(v-if="act.showType.includes('Variety')") 🤹🏻‍♂️
          span(v-if="act.showType.includes('Other')") 🕶
          span(:class="actStatus") {{act.name | shorten(24)}}

          a.delete(v-show="$root.editMode" href="#" @click.prevent="removeAct(show, act._id)") remove act
        p(v-show="$root.editMode")
          a(href="#" @click="showAddActModal(day, venue, show)" data-toggle="modal" data-target="#add-act-modal") add act

script.
  Vue.component('shows', {
    template: "#shows-template",
    props: ['day', 'venue'],
    computed: {
      shows() {
        return store.getters
          .getShows(this.day, this.venue)
          .sort((a,b)=> a.startTime > b.startTime ? 1 : -1)
      },
      actStatus() {
        // Todo: get confirmation status
        return 'font-weight-bold'
      }
    },
    filters: {
      duration(time) {
        if(time == 0) return '\xa0\xa0'
        if(time < 10) return '\xa0' + time
        else return time
      },
      time(time) {
        time = String(time)
        return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
      },
      shorten(actName, characters) {
      return actName.length > characters
        ? actName.substring(0,characters)+'...'
        : actName
      },
    },
    methods: {
      setStartTime(showId) {
        let startTime = window.prompt("Start time: ")
        if (startTime == null) {;}
        else {
          startTime = parseInt(startTime)
          if(Number.isNaN(startTime) || startTime < 100) alert("Invalid time")
          else {
            let self = this
            axios
              .put('/api/shows/' + showId, {startTime})
              .then(function(response) {
                self.$store.commit('updateShow', response.data)
              })
              .catch(function(error) {
                alert("Error updating start time")
                console.log(error)
              })
          }
        }
      },
      setEndTime(showId) {
        let endTime = window.prompt("End time: ")
        if (endTime == null) {;}
        else {
          endTime = parseInt(endTime)
          if(Number.isNaN(endTime) || endTime < 100) alert("Invalid time")
          else {
            let self = this
            axios
              .put('/api/shows/' + showId, {endTime})
              .then(function(response) {
                self.$store.commit('updateShow', response.data)
              })
              .catch(function(error) {
                alert("Error updating start time")
                console.log(error)
              })
          }
        }
      },
      removeHost(showId) {
        let self = this
        axios
          .put('/api/shows/' + showId, {host: null})
          .then(function(response) {
            self.$store.commit('updateShow', response.data)
          })
          .catch(function(error) {
            alert("Error removing host :(")
            console.log(error)
          })
      },
      setShowId(showId) {
        this.$store.commit('setShowId', showId)
      },
      promptDuration(show, actId) {
        let act = store.getters.getAct(actId)
        let message = "Set performance length"
        if(act.minimumShowLength) message += ("\nMin: " + act.minimumShowLength)
        if(act.maximumShowLength) message += ("\nMax: " + act.maximumShowLength)
        let duration = window.prompt(message, act.duration ? act.duration : 0)
        if(duration == null) return
        let durationInt = parseInt(duration)
        if(Number.isNaN(durationInt)) alert("Invalid input: " + duration)
        else if (durationInt < 0) alert("Input can't be negative")
        else {
          let self = this
          let actIndex = show.acts.findIndex(a=> a._id == actId)
          show.acts[actIndex].duration = durationInt
          axios
            .put('/api/shows/' + show._id, show)
            .then(function(response) {
              self.$store.commit('updateShow', response.data)
            })
            .catch(function(error) {
              alert("Error updating duration")
              console.log(error)
            })
        }
      },
      showUpdateActDurationModal(act) {
        this.$store.commit('updateActDurationModal', act)
      },
      showAddActModal(day, venue, show) {
        this.$store.state.addActModal = {day, venue, show}
        $('#add-act-modal').on('shown.bs.modal', function () {
          $("#add-act-modal-search").focus()
        })
      },
      removeAct(show, actId) {
        let self = this

        axios
          .post('/api/shows/remove-act/' + actId, show)
          .then(function(response) {
            self.$store.commit('updateShow', response.data)
          })
          .catch(function(error) {
            alert("Error removing act from show :(")
            console.log(error)
          })
      },
      removeShow(id) {
        let self = this
        axios
          .delete('/api/shows/'+id)
          .then(function(response){
            self.$store.commit('removeShow', id)
          })
          .catch(function(error) {
            alert("Failed to delete show :(")
            console.log(error)
          })
      }
    }
  })

style.
  .delete{ float: right}