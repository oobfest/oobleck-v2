extends ../../_layout
block content
  #app.dash-boxes.container-fluid
    p: button.btn.btn-danger(@click="reset") Reset
    section(v-if="!selectedVenue")
      h3 Venue
      button.btn.btn-primary.m-1(@click="selectedVenue='ColdTowne'") ColdTowne Theater
      button.btn.btn-primary.m-1(@click="selectedVenue='Fallout'") Fallout Theater
      button.btn.btn-primary.m-1(@click="selectedVenue='Hideout Up'") Hideout Theatre (upstairs)
      button.btn.btn-primary.m-1(@click="selectedVenue='Hideout Down'") Hideout Theatre (downstairs)
      button.btn.btn-primary.m-1(@click="selectedVenue='North Door'") North Door
      button.btn.btn-primary.m-1(@click="selectedVenue='Velveeta'") Velveeta
    section(v-else)
      p: strong {{selectedVenue}}
          
    section(v-if="selectedVenue && !selectedDay")
      h3 Day
      button.btn.btn-primary.m-1(v-for="day in days" @click="selectedDay=day") {{day}}
    section(v-else)
      p: strong {{selectedDay}}

    section(v-if="selectedVenue && selectedDay && !selectedTime")
      h3 Time
      button.btn.btn-primary.m-1(v-for="time in times" @click="selectedTime=time") {{time | formatTime}}
    section(v-else-if="selectedTime != null")
      p: strong {{selectedTime | formatTime}}
     
    section(v-if="selectedVenue && selectedDay && selectedTime")
      table.minimal-table.mt-2
        thead
          th Price
          th Max
          th Sold
          th Left
        tbody
          td {{selectedShow.price}} 
          td {{selectedShow.capacity}} 
          td {{selectedShow.capacity - selectedShow.remaining}} 
          td {{selectedShow.remaining}} 
          
      table.minimal-table.mt-3
        thead
          th #
          th Name
          th Email
          th Type
          th 
        tbody
          tr(v-for="ticket in selectedShow.tickets")
            td {{ticket.quantity}}
            td {{ticket.name}}
            td {{ticket.email}}
            td {{ticket.type}}
            td: a(href="#" @click="checkIn(ticket._id)") check-in
                   

    
  script.
    let app = new Vue({
      el: "#app",
      data() {
        return {
          state: 'venue',
          selectedVenue: null,
          selectedDay: null,
          selectedTime: null,
          shows: []
        }
      },
      computed: {
        days() {
          return Array.from(new Set(this.shows
            .filter(s=> s.venue == this.selectedVenue)
            .map(s=> s.day)))
        },
        times() {
          return this.shows
            .filter(s=> s.venue == this.selectedVenue)
            .filter(s=> s.day == this.selectedDay)
            .map(s=> s.startTime)
        },
        selectedShow() {
          return this.shows.find(s=> (
            s.venue == this.selectedVenue && 
            s.day == this.selectedDay && 
            s.startTime == this.selectedTime))
        }
      },
      filters: {
        formatTime(time) {
          time = String(time)
          return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
        }
      },
      methods: {
        reset() {
          this.selectedVenue = null
          this.selectedDay = null
          this.selectedTime = null
        },
        checkIn() {
        
        }
      },
      created() {
        let self = this
        axios
          .get('/api/shows')
          .then(response=> {
            self.shows = response.data
          })
          .catch(function(error) {
            alert("Error getting shows :(")
            console.log(error)
          })
      }
    })
    
  style.
    .dash-nav { display: none; }
    .dash-fixed .dash-toolbar { left: 0; }
    .dash-fixed .dash-app main { margin-left: 0}
    .minimal-table { border-collapse: collapse; width: 100% }
    .minimal-table td { border: 1px solid black; padding: 0.5em}