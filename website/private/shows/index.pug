extends ../../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Shows

  #app.dash-boxes.container-fluid
    ul.nav.nav-pills
      li.nav-item
        a.nav-link.active(data-toggle="tab" href="#shows") Shows
      //-li.nav-item
        a.nav-link(href="/shows/tickets") Tickets
      //-li.nav-item
        a.nav-link(data-toggle="tab" href="#print-tickets") Print Tickets
    .tab-content.mt-3
      #shows.tab-pane.fade.show.active
        .box.box-b
          table.box-table.table.table-sm.text-center
            thead
              tr
                th
                  .row
                    .col
                      .form-group.mb-0
                        select.form-control(v-model="searchDay")
                          option(value="" disabled selected) Filter by Day
                          option(value="") All
                          option Tuesday
                          option Wednesday
                          option Thursday
                          option Friday
                          option Saturday
                          option Sunday
                          option Monday
                    .col
                      .form-group.mb-0
                        select.form-control(v-model="searchVenue")
                          option(value="" disabled selected) Filter by Venue
                          option(value="") All
                          option(value="Hideout Down") Hideout Downstairs
                          option(value="Hideout Up") Hideout Upstairs
                          option ColdTowne
                          option Fallout
                          option(value="Velveeta") Velveeta Room
                          option North Door
                th Cap
                th
                  a(href="#" @click.prevent="sortBySold=!sortBySold") Sold
                th
                  a(href="#" @click.prevent="sortByRemaining=!sortByRemaining") Left
            tbody
              tr(v-for="(show, index) in filteredShows")
                td.text-left
                  a(:href="'#collapse'+index" data-toggle="collapse") {{show.day}}, {{show.venue | venue}}, {{show.startTime | time}}
                  .collapse(:id="'collapse'+index")
                    ul
                      li(:class="{'font-weight-bold' : act.headliner}" v-for="act in show.acts") {{act.name}}
                    p(v-if="show.price") Price:&nbsp;
                      a(href="#" @click.prevent="setPrice(show._id)") ${{show.price}}
                    p(v-else)
                      a(href="#" @click.prevent="setPrice(show._id)") No price set

                    table.table.table-sm(v-if="show.capacity != show.remaining")
                      thead
                        tr
                          th Name
                          th Email
                          th Quantity
                          th Type
                          th
                      tbody
                        tr(v-for="ticket in show.tickets")
                          td {{ticket.name}}
                          td {{ticket.email}}
                          td {{ticket.quantity}}

                          td {{ticket.type}}
                          td
                            a(href="#" @click.prevent="removeReservation(show._id, ticket._id)") remove
                    p(v-else) No tickets sold
                    button.btn.btn-secondary.btn-xs(type="button" @click="showId = show._id" data-toggle="modal" data-target="#add-ticket-modal") Add Comp
                    | &nbsp;
                    button.btn.btn-secondary.btn-xs(type="button" @click="reserveWithBadge(show._id)") Add Badge Reservation

                td
                  a.digits(href="#" @click.prevent="setCapacity(show._id)") {{show.capacity ? show.capacity : 'set' }}
                td.digits {{show.capacity - show.remaining}}
                td.digits {{show.remaining}}

      #print-tickets.tab-pane.fade
        .row
          .col-sm-6
            form(action="/shows/print" target="_blank")
              .form-group
                label(for="print-day") Day
                select#print-day.form-control(v-model="print.day" name="day")
                  option(v-for="day in days") {{day}}
              .form-group
                label(for="print-venue") Venue
                select#print-venue.form-control(v-model="print.venue" name="venue")
                  option Hideout Down
                  option Hideout Up
                  option ColdTowne
                  option Fallout
                  option Velveeta
                  option Spider House
                  option Institution
              .form-group
                label(for="print-time") Time
                select#print-time.form-control(v-model="print.time" name="time")
                  option(:value="time" v-for="time in times") {{time | time}}
              button.btn.btn-primary(type="submit" ) View

    add-ticket-modal(:show-id="showId")

  include components/add-ticket
  script.
    let app = new Vue({
      el: "#app",
      data() {
        return {
          print: {
            day: 'Tuesday',
            venue: '',
            time: '',
          },
          sortByRemaining: false,
          sortBySold: false,
          ticketsSort: 'shows',
          shows: [],
          showId: null,
          searchDay: "",
          searchVenue: "",
          days: ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday']
        }
      },
      computed: {
        times() {
          return this.shows
            .filter(s=> (s.venue == this.print.venue) && (s.day == this.print.day))
            .map(s=> s.time)
            .sort((a,b)=> a-b)
        },
        filteredShows() {
          if(this.sortByRemaining) this.shows.sort((a,b)=> { return b.remaining - a.remaining })
          else if (this.sortBySold) this.shows.sort((a,b)=> { return (a.capacity - a.remaining) - (b.capacity - b.remaining) })

          let searchDayRegex = new RegExp(this.searchDay, 'i')
          let searchVenueRegex = new RegExp(this.searchVenue, 'i')
          return this.shows.filter(s=> { return s.day.match(searchDayRegex) && s.venue.match(searchVenueRegex) })
        },
        tickets() {
          alert("CRUNCH")
          let tickets = []
          for(let i=0; i<this.shows.length; i++) {
            for(let j=0; j<this.shows[i].tickets.length; j++) {
              let ticket = this.shows[i].tickets[j]
              ticket.showId = this.shows[i]._id
              ticket.day = this.shows[i].day
              ticket.venue = this.shows[i].venue
              ticket.time = this.shows[i].time
              ticket.paid = ticket.payment
                ? Number(ticket.payment.transactions[0].amount.total)
                : 0
              tickets.push(ticket)
            }
          }
          return _.groupBy(tickets, 'email')
        }
      },
      methods: {
        clicky(yay) {
          alert(yay)
        },
        formatTickets(email, day) {
          return this.tickets[email]
            .filter(t => t.day == day)
            .sort((a, b)=> a.time - b.time)
        },
        getPaid(email) {
          let paid = 0
          let tickets = this.tickets[email]
          for(let ticket of tickets) {
            paid += ticket.paid
          }
          return paid
        },
        getQuantity(email) {
          let quantity = 0
          let tickets = this.tickets[email]
          for(let ticket of tickets) {
            quantity += Number(ticket.quantity)
          }
          return quantity
        },
        formatVenue(venue) {
          switch(venue) {
            case 'Hideout Down': return 'Hideout Downstairs'
            case 'Hideout Up': return 'Hideout Upstairs'
            case 'ColdTowne': return 'ColdTowne'
            case 'Fallout': return 'Fallout'
            case 'Velveeta': return 'Velveeta Room'
            case 'Spider House': return 'Spider House Ballroom'
            case 'Institution': return 'Institution'
            default: return venue
          }
        },
        formatBadge(badgeType) {
          switch(badgeType) {
            case 'all': return 'All-Access Badge'
            case 'performer-full-upgrade': return 'Performer Badge (Full)'
            case 'performer-weekend-upgrade': return 'Performer Badge (Weekend)'
            case 'staff': return 'Staff'
            default: return badgeType
          }
        },
        reserveWithBadge(showId) {
          let badgeEmail = prompt("Badge email")
          if(badgeEmail == null) return
          let quantity = Number(prompt("Quantity"))
          if(quantity == 0) return

          let self = this
          axios
            .post('/api/shows/badge-reservation/' + showId, {email: badgeEmail, quantity: quantity})
            .then(function(response) {
              if(response.data.reservationSuccessful) {
                let index = self.shows.findIndex(s=> s._id == showId)
                Vue.set(self.shows, index, response.data.savedShow)
              }
              else {
                alert(response.data.message)
              }
            })
            .catch(function(error) {
              alert("Error reserving for show with badge :(")
              console.log(error)
            })
        },
        removeReservation(showId, ticketId) {
          let self = this
          axios
            .post('/api/shows/remove-ticket/', {showId, ticketId})
            .then(function(response) {
              let showIndex = self.shows.findIndex(s=> s._id == showId)
              Vue.set(self.shows, showIndex, response.data)
            })
            .catch(function(error) {
              alert("Error removing reservation from show :(")
              console.log(error)
            })
        },
        setCapacity(showId) {
          let capacity = Number(prompt("New capacity"))
          if(capacity == 0) return
          let self = this
          axios
            .post('/api/shows/set-capacity/', {showId, capacity})
            .then((response)=> {
              let index = self.shows.findIndex(s=> s._id == showId)
              Vue.set(self.shows, index, response.data)
            })
            .catch((error)=> {
              alert("Failed to set capacity for show :(")
              console.log(error)
            })
        }
      },
      filters: {
        time(time) {
          time = String(time)
          return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
        },
        venue(venue) {
          switch(venue) {
            case 'Hideout Up':    return 'Hideout Theatre (Upstairs)'
            case 'Hideout Down':  return 'Hideout Theatre (Downstairs)'
            case 'ColdTowne':     return 'ColdTowne Theater'
            case 'Fallout':       return 'Fallout Theater'
            case 'Velveeta':      return 'Velveeta Room'
            case 'North Door':    return 'North Door'
            default:              return venue
          }
        }
      },
      created() {
        let self = this
        axios
          .get('/api/shows/')
          .then(function(response) {
            self.shows = response.data
          })
          .catch(function(error) {
            alert("Error getting shows :(")
            console.log(error)
          })
      }
    })
